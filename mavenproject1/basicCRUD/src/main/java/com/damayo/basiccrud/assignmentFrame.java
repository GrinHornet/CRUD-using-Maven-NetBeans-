/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.damayo.basiccrud;

import java.util.*;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.*;

public class assignmentFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form search
     */
    public assignmentFrame() {
        initComponents();
        displayEmpToTable();
        displayPeriToTable();
    }
    
    public void displayPeriToTable() {
    DefaultTableModel model2 = (DefaultTableModel) periTable.getModel();
    
    try {
        model2.setRowCount(0);
            String query = "SELECT * FROM `peripheral` WHERE `status`= 1;";
            ResultSet resultSet = DatabaseUtil.executeQuery(query);

        while (resultSet.next()) {
            String peripId = resultSet.getString("peripheral_id");
            String fullName = resultSet.getString("name");
            
            model2.addRow(new Object[]{peripId, fullName});
        }
    } catch (SQLException ex) {
        Logger.getLogger(managePeriFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
}
    
   public void displayEmpToTable() {
    DefaultTableModel model = (DefaultTableModel) empTable.getModel();
    
    try {
        model.setRowCount(0);
        String query = "SELECT * FROM employee WHERE status = 1";
        ResultSet resultSet = DatabaseUtil.executeQuery(query);

        while (resultSet.next()) {
            String empId = resultSet.getString("id");
            String fullName = resultSet.getString("fname") + " " + resultSet.getString("lname");
            
            model.addRow(new Object[]{empId, fullName});
        }
    } catch (SQLException ex) {
        Logger.getLogger(assignmentFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
}
public void getEmpTableRecord() {
    
    int selectedRow = empTable.getSelectedRow();

    if (selectedRow != -1) { // Ensure a row is selected
    DefaultTableModel model = (DefaultTableModel) empTable.getModel();
    DefaultTableModel model1 = (DefaultTableModel) assignTable.getModel();
    model1.setRowCount(0); 
    // Retrieve data from the selected row
    String empId = model.getValueAt(selectedRow, 0).toString();

    // Query the database using empId to get the details
        String query = "SELECT a.assignment_id, p.name, a.date_assigned FROM peripheral p JOIN assignment a on p.peripheral_id =a.peripheral_id JOIN employee e on a.id =e.id WHERE e.id =? and a.status = 1 And e.status = 1;";
//        System.out.println("Selected EmpId: " + empId);
        try {
            // Use a prepared statement to avoid SQL injection
            Connection connection = DatabaseUtil.getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, empId);

            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                System.out.println("Selected EmpId: " + empId);
                // Your existing code to retrieve and set values
                String id1 = resultSet.getString("assignment_id"); 
                String name1 = resultSet.getString("name");
                String date1 = resultSet.getString("date_assigned");

                // Set values to assignment table
                model1.addRow(new Object[]{id1, name1, date1});
            }
        } catch (SQLException ex) {
            Logger.getLogger(assignmentFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        empSearchField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        empTable = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        dateAssigned = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        periTable = new javax.swing.JTable();
        periSearchField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        assignTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        empSearchField.setBackground(new java.awt.Color(255, 255, 255));
        empSearchField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        empSearchField.setForeground(new java.awt.Color(0, 0, 0));
        empSearchField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        empSearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empSearchFieldActionPerformed(evt);
            }
        });
        empSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                empSearchFieldKeyReleased(evt);
            }
        });
        jPanel1.add(empSearchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 80, 150, 30));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("CURRENT ASSIGNMENT");
        jLabel1.setVerifyInputWhenFocusTarget(false);
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 100, 190, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ASSIGN PERIPHERALS");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 0, 360, 44));

        empTable.setBackground(new java.awt.Color(255, 255, 255));
        empTable.setForeground(new java.awt.Color(0, 0, 0));
        empTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Full Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        empTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        empTable.setGridColor(new java.awt.Color(51, 51, 51));
        empTable.setIntercellSpacing(new java.awt.Dimension(2, 2));
        empTable.setShowGrid(true);
        empTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                empTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(empTable);
        if (empTable.getColumnModel().getColumnCount() > 0) {
            empTable.getColumnModel().getColumn(0).setMinWidth(30);
            empTable.getColumnModel().getColumn(0).setMaxWidth(30);
            empTable.getColumnModel().getColumn(1).setMinWidth(120);
            empTable.getColumnModel().getColumn(1).setMaxWidth(120);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 120, 150, 260));

        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Date Assigned");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 390, 100, -1));

        dateAssigned.setBackground(new java.awt.Color(255, 255, 255));
        dateAssigned.setForeground(new java.awt.Color(0, 0, 0));
        dateAssigned.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateAssignedActionPerformed(evt);
            }
        });
        jPanel1.add(dateAssigned, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 410, 180, 40));

        addBtn.setBackground(new java.awt.Color(0, 204, 102));
        addBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addBtn.setForeground(new java.awt.Color(255, 255, 255));
        addBtn.setText("ADD");
        addBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });
        jPanel1.add(addBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 410, 150, 40));

        deleteBtn.setBackground(new java.awt.Color(204, 51, 0));
        deleteBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        deleteBtn.setText("DELETE");
        deleteBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        jPanel1.add(deleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 360, 180, 40));

        periTable.setBackground(new java.awt.Color(255, 255, 255));
        periTable.setForeground(new java.awt.Color(0, 0, 0));
        periTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        periTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        periTable.setGridColor(new java.awt.Color(51, 51, 51));
        periTable.setIntercellSpacing(new java.awt.Dimension(2, 2));
        periTable.setShowGrid(true);
        periTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                periTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(periTable);
        if (periTable.getColumnModel().getColumnCount() > 0) {
            periTable.getColumnModel().getColumn(0).setMinWidth(40);
            periTable.getColumnModel().getColumn(0).setMaxWidth(40);
            periTable.getColumnModel().getColumn(1).setMinWidth(140);
            periTable.getColumnModel().getColumn(1).setMaxWidth(140);
        }

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 180, 260));

        periSearchField.setBackground(new java.awt.Color(255, 255, 255));
        periSearchField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        periSearchField.setForeground(new java.awt.Color(0, 0, 0));
        periSearchField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        periSearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                periSearchFieldActionPerformed(evt);
            }
        });
        periSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                periSearchFieldKeyReleased(evt);
            }
        });
        jPanel1.add(periSearchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 180, 30));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Search Peripherals :");
        jLabel3.setVerifyInputWhenFocusTarget(false);
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 150, -1));

        assignTable.setBackground(new java.awt.Color(255, 255, 255));
        assignTable.setForeground(new java.awt.Color(0, 0, 0));
        assignTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "PERIPHERAL", "DATE ASSIGNED"
            }
        ));
        assignTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        assignTable.setGridColor(new java.awt.Color(51, 51, 51));
        assignTable.setIntercellSpacing(new java.awt.Dimension(2, 2));
        assignTable.setRowMargin(2);
        assignTable.setShowGrid(true);
        assignTable.setShowHorizontalLines(true);
        jScrollPane3.setViewportView(assignTable);
        if (assignTable.getColumnModel().getColumnCount() > 0) {
            assignTable.getColumnModel().getColumn(0).setMinWidth(40);
            assignTable.getColumnModel().getColumn(0).setMaxWidth(40);
            assignTable.getColumnModel().getColumn(1).setMinWidth(170);
            assignTable.getColumnModel().getColumn(1).setMaxWidth(170);
            assignTable.getColumnModel().getColumn(2).setMinWidth(120);
            assignTable.getColumnModel().getColumn(2).setMaxWidth(120);
        }

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 130, 330, 220));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Search Employee :");
        jLabel4.setVerifyInputWhenFocusTarget(false);
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 60, 130, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 762, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void empSearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empSearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_empSearchFieldActionPerformed

    private void empTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_empTableMouseClicked
    
        getEmpTableRecord();
    }//GEN-LAST:event_empTableMouseClicked

    private void empSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_empSearchFieldKeyReleased
  
    DefaultTableModel model = (DefaultTableModel) empTable.getModel();
    
    try {
        model.setRowCount(0);
        String query = "SELECT * FROM employee WHERE status =1";
        ResultSet resultSet = DatabaseUtil.executeQuery(query);

        while (resultSet.next()) {
            String empId = resultSet.getString("id");
            String fullName = resultSet.getString("fname") + " " + resultSet.getString("lname");
            
            if(fullName.toLowerCase().contains(empSearchField.getText().toLowerCase())){
                model.addRow(new Object[]{empId, fullName});
            }
        }
    } catch (SQLException ex) {
        Logger.getLogger(assignmentFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_empSearchFieldKeyReleased

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to perform this action?", "Confirmation", JOptionPane.YES_NO_OPTION);
        int selectedEmpRow = empTable.getSelectedRow();
        int selectedPeriRow = periTable.getSelectedRow();

        if (selectedEmpRow != -1 && selectedPeriRow != -1) { // Ensure a row is selected
            DefaultTableModel model = (DefaultTableModel) empTable.getModel();
            DefaultTableModel model1 = (DefaultTableModel) periTable.getModel();

            // Retrieve data from the selected row
            String empId = model.getValueAt(selectedEmpRow, 0).toString();
            String periId = model1.getValueAt(selectedPeriRow, 0).toString();

            Connection connection = null;
            PreparedStatement preparedStatement = null;

            if (confirmation == JOptionPane.YES_OPTION) {
                try {
                    // Assuming 'id' is the primary key of your table and is used to identify the record to update
                    String insertQuery = "INSERT INTO `assignment`(`assignment_id`, `peripheral_id`, `id`, `date_assigned`, `status`) VALUES (?,?,?,?,?)";

                    connection = DatabaseUtil.getConnection();
                    preparedStatement = connection.prepareStatement(insertQuery);

                    if (empId.equals("")) {
                        JOptionPane.showMessageDialog(this, "Please select Employee.");
                    } else if (periId.equals("")) {
                        JOptionPane.showMessageDialog(this, "Please select peripheral.");
                    } else if (dateAssigned.getText().equals("")) {
                        JOptionPane.showMessageDialog(this, "Please add Date assigned.");
                    } else {
                        preparedStatement.setString(1, null);
                        preparedStatement.setString(2, periId);
                        preparedStatement.setString(3, empId);
                        preparedStatement.setString(4, dateAssigned.getText());
                        preparedStatement.setString(5, "1");

                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            // Data inserted successfully

                            // Update the status in peripheral table
                            String updateQuery = "UPDATE `peripheral` SET `status`='2' WHERE peripheral_id =?";
                            preparedStatement = connection.prepareStatement(updateQuery);
                            preparedStatement.setString(1, periId);
                            int updateRowsAffected = preparedStatement.executeUpdate();

                            if (updateRowsAffected > 0) {
                                // Update in peripheral table successful
                                JOptionPane.showMessageDialog(this, "Action performed successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                                getEmpTableRecord();
                                displayPeriToTable();
                                dateAssigned.setText("");
                                empSearchField.setText("");
                                periSearchField.setText("");
                            } else {
                                // Failed to update in peripheral table
                                JOptionPane.showMessageDialog(this, "Failed to update peripheral status", "Failure", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {
                            // No rows affected, insert failed
                            JOptionPane.showMessageDialog(this, "Failed to perform action", "Failure", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                } finally {
                    // Close resources in the reverse order of their creation
                    try {
                        if (preparedStatement != null) {
                            preparedStatement.close();
                        }
                        if (connection != null) {
                                     connection.close();
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            } else {
                // User clicked 'No' for confirmation
                JOptionPane.showMessageDialog(this, "Action cancelled", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
            }
        }      
    }//GEN-LAST:event_addBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        int selectedRow = assignTable.getSelectedRow();

        if (selectedRow != -1) { // Ensure a row is selected
            DefaultTableModel model = (DefaultTableModel) assignTable.getModel();
            // Retrieve data from the selected row
            String assId = model.getValueAt(selectedRow, 0).toString();

            // Confirmation dialog
            int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this record?", "Confirmation", JOptionPane.YES_NO_OPTION);

            if (confirmation == JOptionPane.YES_OPTION) {
                Connection connection = null;
                PreparedStatement preparedStatement1 = null;
                PreparedStatement preparedStatement2 = null;

                try {
                    // Update status in assignment table
                    String query1 = "UPDATE assignment SET status = 0 WHERE assignment_id = ?";
                    connection = DatabaseUtil.getConnection();
                    preparedStatement1 = connection.prepareStatement(query1);
                    preparedStatement1.setString(1, assId);

                    int rowsAffected1 = preparedStatement1.executeUpdate();

                    // Update status in peripheral table
                    String query2 = "UPDATE peripheral p " +
                                    "JOIN assignment a ON a.peripheral_id = p.peripheral_id " +
                                    "SET p.status = 1 " +
                                    "WHERE a.assignment_id = ?";
                    preparedStatement2 = connection.prepareStatement(query2);
                    preparedStatement2.setString(1, assId);

                    int rowsAffected2 = preparedStatement2.executeUpdate();

                    if (rowsAffected1 > 0 && rowsAffected2 > 0) {
                        // Data updated successfully in both tables
                        JOptionPane.showMessageDialog(this, "Data Deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                        getEmpTableRecord();
                        displayPeriToTable();
                        dateAssigned.setText("");
                        empSearchField.setText("");
                        periSearchField.setText("");
                    } else {
                        // No rows affected, update failed
                        JOptionPane.showMessageDialog(this, "Failed to update data", "Failure", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                    // Close resources in the reverse order of their creation
                    try {
                        if (preparedStatement1 != null) {
                            preparedStatement1.close();
                        }
                        if (preparedStatement2 != null) {
                            preparedStatement2.close();
                        }
                        if (connection != null) {
                            connection.close();
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void periTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_periTableMouseClicked
//        getPeriTableRecord();
    }//GEN-LAST:event_periTableMouseClicked

    private void periSearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_periSearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_periSearchFieldActionPerformed

    private void periSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_periSearchFieldKeyReleased

        DefaultTableModel model = (DefaultTableModel) periTable.getModel();

        try {
            model.setRowCount(0);
            String query = "SELECT * FROM `peripheral` WHERE `status`= 1;";
            
            ResultSet resultSet = DatabaseUtil.executeQuery(query);

            while (resultSet.next()) {
                String periId = resultSet.getString("peripheral_id");
                String fullName = resultSet.getString("name");

                if(fullName.toLowerCase().contains(periSearchField.getText().toLowerCase())){
                    model.addRow(new Object[]{periId, fullName});
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(managePeriFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_periSearchFieldKeyReleased

    private void dateAssignedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateAssignedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateAssignedActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JTable assignTable;
    private javax.swing.JTextField dateAssigned;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextField empSearchField;
    private javax.swing.JTable empTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField periSearchField;
    private javax.swing.JTable periTable;
    // End of variables declaration//GEN-END:variables
}
